
import "../files/ImportCycleA.syp";
import "Import_test.syp";
import std.List;

void foo()
{
	MyGlobal = 4;

	MyAlias a = 3;
}

void bar()
{
	MyStruct s;
	s.a = 4;

	MyEnum e = MyEnum.ONE;
}

void other()
{
	myFunc();

	MyClass c{4};

	c.calc();
}

void cycle()
{
	Foo f;
	f.a = 3;
	run(f);
}

int importList()
{
	List<int> a;
	a.add(5);
	return a.size();
}

========

%Foo = type { i32 }
%Something = type { i32, i32 }
%MyClass = type { i32, i32 }
%MyStruct = type { i32 }
%List_i32 = type { [0 x i32]*, i32, i32 }

@MyGlobal = external global i32

declare i32 @run(%Foo)

declare void @Something_this(%Something*, i32, i32)

declare void @Something_inc(%Something*)

declare void @Something_null(%Something*)

declare i32 @myFunc()

declare void @MyClass_this(%MyClass*, i32)

declare void @MyClass_calc(%MyClass*)

declare void @MyClass_null(%MyClass*)

declare i32 @rand()

declare i32 @getrandom(i8*, i32, i32)

declare i64 @strtol([0 x i8]*, [0 x i8]**, i32)

define void @foo() {
  store i32 4, i32* @MyGlobal
  %a = alloca double
  store double 3.000000e+00, double* %a
  ret void
}

define void @bar() {
  %s = alloca %MyStruct
  %1 = getelementptr %MyStruct, %MyStruct* %s, i32 0, i32 0
  store i32 4, i32* %1
  %e = alloca i32
  store i32 0, i32* %e
  ret void
}

define void @other() {
  %1 = call i32 @myFunc()
  %c = alloca %MyClass
  call void @MyClass_this(%MyClass* %c, i32 4)
  call void @MyClass_calc(%MyClass* %c)
  call void @MyClass_null(%MyClass* %c)
  ret void
}

define void @cycle() {
  %f = alloca %Foo
  %1 = getelementptr %Foo, %Foo* %f, i32 0, i32 0
  store i32 3, i32* %1
  %2 = load %Foo, %Foo* %f
  %3 = call i32 @run(%Foo %2)
  ret void
}

define i32 @importList() {
  %a = alloca %List_i32
  call void @List_i32_this(%List_i32* %a)
  call void @List_i32_add(%List_i32* %a, i32 5)
  %1 = call i32 @List_i32_size(%List_i32* %a)
  call void @List_i32_null(%List_i32* %a)
  ret i32 %1
}

define void @List_i32_this(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 0
  store [0 x i32]* null, [0 x i32]** %3
  %4 = load %List_i32*, %List_i32** %1
  %5 = getelementptr %List_i32, %List_i32* %4, i32 0, i32 2
  store i32 0, i32* %5
  %6 = load %List_i32*, %List_i32** %1
  %7 = getelementptr %List_i32, %List_i32* %6, i32 0, i32 1
  store i32 0, i32* %7
  ret void
}

define void @List_i32_null(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 0
  %4 = load [0 x i32]*, [0 x i32]** %3
  %5 = bitcast [0 x i32]* %4 to i8*
  call void @free(i8* %5)
  %6 = load %List_i32*, %List_i32** %1
  %7 = getelementptr %List_i32, %List_i32* %6, i32 0, i32 0
  store [0 x i32]* null, [0 x i32]** %7
  %8 = load %List_i32*, %List_i32** %1
  %9 = getelementptr %List_i32, %List_i32* %8, i32 0, i32 2
  %10 = load %List_i32*, %List_i32** %1
  %11 = getelementptr %List_i32, %List_i32* %10, i32 0, i32 1
  store i32 0, i32* %11
  store i32 0, i32* %9
  ret void
}

define void @List_i32_shuffle(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  %i = alloca i32
  store i32 %4, i32* %i
  %5 = load i32, i32* %i
  %6 = sub i32 %5, 1
  %k = alloca i32
  store i32 %6, i32* %k
  br label %7

; <label>:7:                                      ; preds = %41, %0
  %8 = load i32, i32* %i
  %9 = icmp sgt i32 %8, 1
  br i1 %9, label %10, label %46

; <label>:10:                                     ; preds = %7
  %11 = call i32 @rand()
  %12 = load i32, i32* %i
  %13 = srem i32 %11, %12
  %x = alloca i32
  store i32 %13, i32* %x
  %14 = load i32, i32* %x
  %15 = load %List_i32*, %List_i32** %1
  %16 = getelementptr %List_i32, %List_i32* %15, i32 0, i32 0
  %17 = load [0 x i32]*, [0 x i32]** %16
  %18 = sext i32 %14 to i64
  %19 = getelementptr [0 x i32], [0 x i32]* %17, i32 0, i64 %18
  %20 = load i32, i32* %19
  %t = alloca i32
  store i32 %20, i32* %t
  %21 = load i32, i32* %x
  %22 = load %List_i32*, %List_i32** %1
  %23 = getelementptr %List_i32, %List_i32* %22, i32 0, i32 0
  %24 = load [0 x i32]*, [0 x i32]** %23
  %25 = sext i32 %21 to i64
  %26 = getelementptr [0 x i32], [0 x i32]* %24, i32 0, i64 %25
  %27 = load i32, i32* %k
  %28 = load %List_i32*, %List_i32** %1
  %29 = getelementptr %List_i32, %List_i32* %28, i32 0, i32 0
  %30 = load [0 x i32]*, [0 x i32]** %29
  %31 = sext i32 %27 to i64
  %32 = getelementptr [0 x i32], [0 x i32]* %30, i32 0, i64 %31
  %33 = load i32, i32* %32
  store i32 %33, i32* %26
  %34 = load i32, i32* %k
  %35 = load %List_i32*, %List_i32** %1
  %36 = getelementptr %List_i32, %List_i32* %35, i32 0, i32 0
  %37 = load [0 x i32]*, [0 x i32]** %36
  %38 = sext i32 %34 to i64
  %39 = getelementptr [0 x i32], [0 x i32]* %37, i32 0, i64 %38
  %40 = load i32, i32* %t
  store i32 %40, i32* %39
  br label %41

; <label>:41:                                     ; preds = %10
  %42 = load i32, i32* %i
  %43 = add i32 %42, -1
  store i32 %43, i32* %i
  %44 = load i32, i32* %k
  %45 = add i32 %44, -1
  store i32 %45, i32* %k
  br label %7

; <label>:46:                                     ; preds = %7
  ret void
}

define void @List_i32_add(%List_i32* %this, i32 %item) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = alloca i32
  store i32 %item, i32* %2
  %3 = load %List_i32*, %List_i32** %1
  %4 = getelementptr %List_i32, %List_i32* %3, i32 0, i32 0
  %5 = load [0 x i32]*, [0 x i32]** %4
  %6 = icmp eq [0 x i32]* null, %5
  br i1 %6, label %7, label %15

; <label>:7:                                      ; preds = %0
  %8 = load %List_i32*, %List_i32** %1
  %9 = getelementptr %List_i32, %List_i32* %8, i32 0, i32 0
  %10 = load %List_i32*, %List_i32** %1
  %11 = getelementptr %List_i32, %List_i32* %10, i32 0, i32 2
  store i32 8, i32* %11
  %12 = call i8* @malloc(i64 32)
  %13 = bitcast i8* %12 to [8 x i32]*
  %14 = bitcast [8 x i32]* %13 to [0 x i32]*
  store [0 x i32]* %14, [0 x i32]** %9
  br label %61

; <label>:15:                                     ; preds = %0
  %16 = load %List_i32*, %List_i32** %1
  %17 = getelementptr %List_i32, %List_i32* %16, i32 0, i32 1
  %18 = load i32, i32* %17
  %19 = load %List_i32*, %List_i32** %1
  %20 = getelementptr %List_i32, %List_i32* %19, i32 0, i32 2
  %21 = load i32, i32* %20
  %22 = icmp eq i32 %18, %21
  br i1 %22, label %23, label %61

; <label>:23:                                     ; preds = %15
  %24 = load %List_i32*, %List_i32** %1
  %25 = getelementptr %List_i32, %List_i32* %24, i32 0, i32 2
  %26 = load %List_i32*, %List_i32** %1
  %27 = getelementptr %List_i32, %List_i32* %26, i32 0, i32 2
  %28 = load i32, i32* %27
  %29 = ashr i32 %28, 1
  %30 = load i32, i32* %25
  %31 = add i32 %30, %29
  store i32 %31, i32* %25
  %32 = sext i32 %31 to i64
  %33 = mul i64 4, %32
  %34 = call i8* @malloc(i64 %33)
  %35 = bitcast i8* %34 to [0 x i32]*
  %ptr = alloca [0 x i32]*
  store [0 x i32]* %35, [0 x i32]** %ptr
  %i = alloca i32
  store i32 0, i32* %i
  br label %36

; <label>:36:                                     ; preds = %54, %23
  %37 = load i32, i32* %i
  %38 = load %List_i32*, %List_i32** %1
  %39 = getelementptr %List_i32, %List_i32* %38, i32 0, i32 1
  %40 = load i32, i32* %39
  %41 = icmp slt i32 %37, %40
  br i1 %41, label %42, label %57

; <label>:42:                                     ; preds = %36
  %43 = load i32, i32* %i
  %44 = load [0 x i32]*, [0 x i32]** %ptr
  %45 = sext i32 %43 to i64
  %46 = getelementptr [0 x i32], [0 x i32]* %44, i32 0, i64 %45
  %47 = load i32, i32* %i
  %48 = load %List_i32*, %List_i32** %1
  %49 = getelementptr %List_i32, %List_i32* %48, i32 0, i32 0
  %50 = load [0 x i32]*, [0 x i32]** %49
  %51 = sext i32 %47 to i64
  %52 = getelementptr [0 x i32], [0 x i32]* %50, i32 0, i64 %51
  %53 = load i32, i32* %52
  store i32 %53, i32* %46
  br label %54

; <label>:54:                                     ; preds = %42
  %55 = load i32, i32* %i
  %56 = add i32 %55, 1
  store i32 %56, i32* %i
  br label %36

; <label>:57:                                     ; preds = %36
  %58 = load %List_i32*, %List_i32** %1
  %59 = getelementptr %List_i32, %List_i32* %58, i32 0, i32 0
  %60 = load [0 x i32]*, [0 x i32]** %ptr
  store [0 x i32]* %60, [0 x i32]** %59
  br label %61

; <label>:61:                                     ; preds = %15, %57, %7
  %62 = load %List_i32*, %List_i32** %1
  %63 = getelementptr %List_i32, %List_i32* %62, i32 0, i32 1
  %64 = load i32, i32* %63
  %65 = add i32 %64, 1
  store i32 %65, i32* %63
  %66 = load %List_i32*, %List_i32** %1
  %67 = getelementptr %List_i32, %List_i32* %66, i32 0, i32 0
  %68 = load [0 x i32]*, [0 x i32]** %67
  %69 = sext i32 %64 to i64
  %70 = getelementptr [0 x i32], [0 x i32]* %68, i32 0, i64 %69
  %71 = load i32, i32* %2
  store i32 %71, i32* %70
  ret void
}

define i32 @List_i32_pop(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = add i32 %4, -1
  store i32 %5, i32* %3
  %6 = load %List_i32*, %List_i32** %1
  %7 = getelementptr %List_i32, %List_i32* %6, i32 0, i32 0
  %8 = load [0 x i32]*, [0 x i32]** %7
  %9 = sext i32 %5 to i64
  %10 = getelementptr [0 x i32], [0 x i32]* %8, i32 0, i64 %9
  %11 = load i32, i32* %10
  ret i32 %11
}

define i32 @List_i32_top(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = sub i32 %4, 1
  %6 = load %List_i32*, %List_i32** %1
  %7 = getelementptr %List_i32, %List_i32* %6, i32 0, i32 0
  %8 = load [0 x i32]*, [0 x i32]** %7
  %9 = sext i32 %5 to i64
  %10 = getelementptr [0 x i32], [0 x i32]* %8, i32 0, i64 %9
  %11 = load i32, i32* %10
  ret i32 %11
}

define i32 @List_i32_at(%List_i32* %this, i32 %idx) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = alloca i32
  store i32 %idx, i32* %2
  %3 = load i32, i32* %2
  %4 = load %List_i32*, %List_i32** %1
  %5 = getelementptr %List_i32, %List_i32* %4, i32 0, i32 0
  %6 = load [0 x i32]*, [0 x i32]** %5
  %7 = sext i32 %3 to i64
  %8 = getelementptr [0 x i32], [0 x i32]* %6, i32 0, i64 %7
  %9 = load i32, i32* %8
  ret i32 %9
}

define i32* @List_i32_ref(%List_i32* %this, i32 %idx) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = alloca i32
  store i32 %idx, i32* %2
  %3 = load i32, i32* %2
  %4 = load %List_i32*, %List_i32** %1
  %5 = getelementptr %List_i32, %List_i32* %4, i32 0, i32 0
  %6 = load [0 x i32]*, [0 x i32]** %5
  %7 = sext i32 %3 to i64
  %8 = getelementptr [0 x i32], [0 x i32]* %6, i32 0, i64 %7
  ret i32* %8
}

define i32 @List_i32_size(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  ret i32 %4
}

define void @List_i32_clear(%List_i32* %this) {
  %1 = alloca %List_i32*
  store %List_i32* %this, %List_i32** %1
  %2 = load %List_i32*, %List_i32** %1
  %3 = getelementptr %List_i32, %List_i32* %2, i32 0, i32 1
  store i32 0, i32* %3
  ret void
}

declare void @free(i8*)

declare i8* @malloc(i64)

========

bar T
cycle T
foo T
free U
importList T
List_i32_add T
List_i32_at T
List_i32_clear T
List_i32_null T
List_i32_pop T
List_i32_ref T
List_i32_shuffle T
List_i32_size T
List_i32_this T
List_i32_top T
malloc U
MyClass_calc U
MyClass_null U
MyClass_this U
myFunc U
MyGlobal U
other T
rand U
run U
