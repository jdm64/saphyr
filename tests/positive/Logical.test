
int main()
{
	auto x = 5, y = 9.0;

	auto a = x && y;
	auto b = x || y;

	return a;
}

int complexOr(int x)
{
	if (x == 1 || x == 2 || x == 3 || x == 4)
		return 6;
	return 7;
}

int complexAnd(int x)
{
	if (x == 1 && x == 2 && x == 3 && x == 4)
		return 6;
	return 7;
}

========

define i32 @main() {
  %x = alloca i32
  store i32 5, i32* %x
  %y = alloca double
  store double 9.000000e+00, double* %y
  %1 = load i32, i32* %x
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

3:                                                ; preds = %0
  %4 = load double, double* %y
  %5 = fcmp one double %4, 0.000000e+00
  br label %6

6:                                                ; preds = %3, %0
  %7 = phi i1 [ %2, %0 ], [ %5, %3 ]
  %a = alloca i1
  store i1 %7, i1* %a
  %8 = load i32, i32* %x
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = load double, double* %y
  %12 = fcmp one double %11, 0.000000e+00
  br label %13

13:                                               ; preds = %10, %6
  %14 = phi i1 [ %9, %6 ], [ %12, %10 ]
  %b = alloca i1
  store i1 %14, i1* %b
  %15 = load i1, i1* %a
  %16 = zext i1 %15 to i32
  ret i32 %16
}

define i32 @complexOr(i32 %x) {
  %1 = alloca i32
  store i32 %x, i32* %1
  %2 = load i32, i32* %1
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %7, label %4

4:                                                ; preds = %0
  %5 = load i32, i32* %1
  %6 = icmp eq i32 %5, 2
  br label %7

7:                                                ; preds = %4, %0
  %8 = phi i1 [ %3, %0 ], [ %6, %4 ]
  br i1 %8, label %12, label %9

9:                                                ; preds = %7
  %10 = load i32, i32* %1
  %11 = icmp eq i32 %10, 3
  br label %12

12:                                               ; preds = %9, %7
  %13 = phi i1 [ %8, %7 ], [ %11, %9 ]
  br i1 %13, label %17, label %14

14:                                               ; preds = %12
  %15 = load i32, i32* %1
  %16 = icmp eq i32 %15, 4
  br label %17

17:                                               ; preds = %14, %12
  %18 = phi i1 [ %13, %12 ], [ %16, %14 ]
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  ret i32 6

20:                                               ; preds = %17
  ret i32 7
}

define i32 @complexAnd(i32 %x) {
  %1 = alloca i32
  store i32 %x, i32* %1
  %2 = load i32, i32* %1
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %4, label %7

4:                                                ; preds = %0
  %5 = load i32, i32* %1
  %6 = icmp eq i32 %5, 2
  br label %7

7:                                                ; preds = %4, %0
  %8 = phi i1 [ %3, %0 ], [ %6, %4 ]
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = load i32, i32* %1
  %11 = icmp eq i32 %10, 3
  br label %12

12:                                               ; preds = %9, %7
  %13 = phi i1 [ %8, %7 ], [ %11, %9 ]
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = load i32, i32* %1
  %16 = icmp eq i32 %15, 4
  br label %17

17:                                               ; preds = %14, %12
  %18 = phi i1 [ %13, %12 ], [ %16, %14 ]
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  ret i32 6

20:                                               ; preds = %17
  ret i32 7
}

========

complexAnd T
complexOr T
main T
