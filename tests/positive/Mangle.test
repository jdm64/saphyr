
#[mangle("bar")]
void foo()
{
}

void test()
{
	foo();
}

class MyClass
{
	#[mangle("super_mangle", "true")]
	void foo()
	{
	}
}

void bla()
{
	MyClass a;

	a.foo();
}

void calc()
{
}

#[mangle("calc2")]
void calc(int a)
{
}

#[mangle("calc3")]
void calc(double b)
{
}

void callCalc()
{
	calc();
	calc(3);
	calc(4.6);
}

class Overload
{
	struct this
	{
		int a;
	}

	this()
	a{3}
	{
	}

	#[mangle("this2")]
	this(int i)
	a{i}
	{
	}

	int calc()
	{
		return 5;
	}

	#[mangle("calc2")]
	float calc(float f)
	{
		return f + 5;
	}
}

void callOverload()
{
	Overload a, b{2};

	a.calc();
	b.calc(4);
}

========

%MyClass = type { i8 }
%Overload = type { i32 }

define void @bar() {
  ret void
}

define void @test() {
  call void @bar()
  ret void
}

define void @super_mangle(%MyClass* %this) {
  %1 = alloca %MyClass*
  store %MyClass* %this, %MyClass** %1
  ret void
}

define void @bla() {
  %a = alloca %MyClass
  call void @super_mangle(%MyClass* %a)
  ret void
}

define void @calc() {
  ret void
}

define void @calc2(i32 %a) {
  %1 = alloca i32
  store i32 %a, i32* %1
  ret void
}

define void @calc3(double %b) {
  %1 = alloca double
  store double %b, double* %1
  ret void
}

define void @callCalc() {
  call void @calc()
  call void @calc2(i32 3)
  call void @calc3(double 4.600000e+00)
  ret void
}

define void @Overload_this(%Overload* %this) {
  %1 = alloca %Overload*
  store %Overload* %this, %Overload** %1
  %2 = load %Overload*, %Overload** %1
  %3 = getelementptr %Overload, %Overload* %2, i32 0, i32 0
  store i32 3, i32* %3
  ret void
}

define void @Overload_this2(%Overload* %this, i32 %i) {
  %1 = alloca %Overload*
  store %Overload* %this, %Overload** %1
  %2 = alloca i32
  store i32 %i, i32* %2
  %3 = load %Overload*, %Overload** %1
  %4 = getelementptr %Overload, %Overload* %3, i32 0, i32 0
  %5 = load i32, i32* %2
  store i32 %5, i32* %4
  ret void
}

define i32 @Overload_calc(%Overload* %this) {
  %1 = alloca %Overload*
  store %Overload* %this, %Overload** %1
  ret i32 5
}

define float @Overload_calc2(%Overload* %this, float %f) {
  %1 = alloca %Overload*
  store %Overload* %this, %Overload** %1
  %2 = alloca float
  store float %f, float* %2
  %3 = load float, float* %2
  %4 = fadd float %3, 5.000000e+00
  ret float %4
}

define void @callOverload() {
  %a = alloca %Overload
  call void @Overload_this(%Overload* %a)
  %b = alloca %Overload
  call void @Overload_this2(%Overload* %b, i32 2)
  %1 = call i32 @Overload_calc(%Overload* %a)
  %2 = call float @Overload_calc2(%Overload* %b, float 4.000000e+00)
  ret void
}

========

bar T
bla T
calc T
calc2 T
calc3 T
callCalc T
callOverload T
Overload_calc T
Overload_calc2 T
Overload_this T
Overload_this2 T
super_mangle T
test T
