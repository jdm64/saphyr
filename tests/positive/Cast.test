
struct Foo
{
	int a;
}

void func()
{
	@void p = new Foo;

	@Foo f = p->as(@Foo);

	int a = 10;

	auto b = a->as(bool);
}

void complex()
{
	@void p = new Foo;

	int z = p->as(@Foo).a;
}

void noOp()
{
	@Foo p = new Foo;

	int x = p->as(@Foo).a;
}

void mutCast()
{
	const int a = 4;
	const float b = 2.8;

	a->mut() = 5;
	a->mut = 7;
	b->mut = a->mut;
}

alias CONSTARRY = const @const []const int;

void constCast()
{
	@[]int b = null;
	CONSTARRY a = b->as(CONSTARRY);

	b = a->as(@[]int);
}

void pointerToInt()
{
	@Foo p = new Foo;
	int addr = p->as(int);
}

========

%Foo = type { i32 }

define void @func() {
  %1 = call i8* @malloc(i64 4)
  %2 = bitcast i8* %1 to %Foo*
  %p = alloca i8*
  %3 = bitcast %Foo* %2 to i8*
  store i8* %3, i8** %p
  %4 = load i8*, i8** %p
  %5 = bitcast i8* %4 to %Foo*
  %6 = alloca %Foo*
  store %Foo* %5, %Foo** %6
  %7 = load %Foo*, %Foo** %6
  %f = alloca %Foo*
  store %Foo* %7, %Foo** %f
  %a = alloca i32
  store i32 10, i32* %a
  %8 = load i32, i32* %a
  %9 = icmp ne i32 %8, 0
  %b = alloca i1
  store i1 %9, i1* %b
  ret void
}

declare i8* @malloc(i64)

define void @complex() {
  %1 = call i8* @malloc(i64 4)
  %2 = bitcast i8* %1 to %Foo*
  %p = alloca i8*
  %3 = bitcast %Foo* %2 to i8*
  store i8* %3, i8** %p
  %4 = load i8*, i8** %p
  %5 = bitcast i8* %4 to %Foo*
  %6 = alloca %Foo*
  store %Foo* %5, %Foo** %6
  %7 = load %Foo*, %Foo** %6
  %8 = getelementptr %Foo, %Foo* %7, i32 0, i32 0
  %9 = load i32, i32* %8
  %z = alloca i32
  store i32 %9, i32* %z
  ret void
}

define void @noOp() {
  %1 = call i8* @malloc(i64 4)
  %2 = bitcast i8* %1 to %Foo*
  %p = alloca %Foo*
  store %Foo* %2, %Foo** %p
  %3 = load %Foo*, %Foo** %p
  %4 = alloca %Foo*
  store %Foo* %3, %Foo** %4
  %5 = load %Foo*, %Foo** %4
  %6 = getelementptr %Foo, %Foo* %5, i32 0, i32 0
  %7 = load i32, i32* %6
  %x = alloca i32
  store i32 %7, i32* %x
  ret void
}

define void @mutCast() {
  %a = alloca i32
  store i32 4, i32* %a
  %b = alloca float
  store float 0x4006666660000000, float* %b
  store i32 5, i32* %a
  store i32 7, i32* %a
  %1 = load i32, i32* %a
  %2 = sitofp i32 %1 to float
  store float %2, float* %b
  ret void
}

define void @constCast() {
  %b = alloca [0 x i32]*
  store [0 x i32]* null, [0 x i32]** %b
  %1 = load [0 x i32]*, [0 x i32]** %b
  %2 = alloca [0 x i32]*
  store [0 x i32]* %1, [0 x i32]** %2
  %3 = load [0 x i32]*, [0 x i32]** %2
  %a = alloca [0 x i32]*
  store [0 x i32]* %3, [0 x i32]** %a
  %4 = load [0 x i32]*, [0 x i32]** %a
  %5 = alloca [0 x i32]*
  store [0 x i32]* %4, [0 x i32]** %5
  %6 = load [0 x i32]*, [0 x i32]** %5
  store [0 x i32]* %6, [0 x i32]** %b
  ret void
}

define void @pointerToInt() {
  %1 = call i8* @malloc(i64 4)
  %2 = bitcast i8* %1 to %Foo*
  %p = alloca %Foo*
  store %Foo* %2, %Foo** %p
  %3 = load %Foo*, %Foo** %p
  %4 = ptrtoint %Foo* %3 to i32
  %5 = alloca i32
  store i32 %4, i32* %5
  %6 = load i32, i32* %5
  %addr = alloca i32
  store i32 %6, i32* %addr
  ret void
}

========

complex T
constCast T
func T
malloc U
mutCast T
noOp T
pointerToInt T
