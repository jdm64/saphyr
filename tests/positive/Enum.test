
enum Colors
{
	RED, ORANGE = 2 + 3, YELLOW, GREEN = 2, BLUE{7}, PURPLE
}

enum Dir<uint8>
{
	N, S, E, W
}

int func(Colors c)
{
	return c + Dir.S;
}

int func2()
{
	auto a = Colors.BLUE, b = Dir.S;

	auto c = a + b;

	return c;
}

void lenOp()
{
	Dir d = Dir.N;

	int s = Colors->len;
	int t = d->len;
}

void arrIdx()
{
	[Colors->len]int a;
	a[Colors.BLUE] = 12;
}

int main()
{
	Colors a, b = Colors.BLUE;

	a = b.YELLOW;

	auto i = func(b);

	return i;
}

========

define i32 @func(i32 %c) {
  %1 = alloca i32
  store i32 %c, i32* %1
  %2 = load i32, i32* %1
  %3 = add i32 %2, 1
  ret i32 %3
}

define i32 @func2() {
  %a = alloca i32
  store i32 7, i32* %a
  %b = alloca i8
  store i8 1, i8* %b
  %1 = load i32, i32* %a
  %2 = load i8, i8* %b
  %3 = zext i8 %2 to i32
  %4 = add i32 %1, %3
  %c = alloca i32
  store i32 %4, i32* %c
  %5 = load i32, i32* %c
  ret i32 %5
}

define void @lenOp() {
  %d = alloca i8
  store i8 0, i8* %d
  %s = alloca i32
  store i32 6, i32* %s
  %1 = load i8, i8* %d
  %t = alloca i32
  store i32 4, i32* %t
  ret void
}

define void @arrIdx() {
  %a = alloca [6 x i32]
  %1 = getelementptr [6 x i32], [6 x i32]* %a, i32 0, i64 7
  store i32 12, i32* %1
  ret void
}

define i32 @main() {
  %a = alloca i32
  %b = alloca i32
  store i32 7, i32* %b
  store i32 6, i32* %a
  %1 = load i32, i32* %b
  %2 = call i32 @func(i32 %1)
  %i = alloca i32
  store i32 %2, i32* %i
  %3 = load i32, i32* %i
  ret i32 %3
}
