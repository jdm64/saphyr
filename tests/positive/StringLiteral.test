
alias StrPtr = @const[]const int8;

auto gA = "global string";

int main()
{
	auto str1 = "double quote";
	auto str2 = `back tick`;
	auto str3 = "žščř";

	return 0;
}

void func()
{
	auto a = "1\n23\n\n45\\6";
	auto b = "--\\\\--";
	auto c = "-\0-\a-\b-\e-\f-\n-\r-\t-\v-";
}

StrPtr getStr(StrPtr s)
{
	return "this test";
}

void callStr()
{
	auto s = getStr("hello");
}

========

@0 = private constant [14 x i8] c"global string\00"
@gA = global [0 x i8]* bitcast ([14 x i8]* @0 to [0 x i8]*)
@1 = private constant [13 x i8] c"double quote\00"
@2 = private constant [10 x i8] c"back tick\00"
@3 = private constant [9 x i8] c"\C5\BE\C5\A1\C4\8D\C5\99\00"
@4 = private constant [11 x i8] c"1\0A23\0A\0A45\\6\00"
@5 = private constant [7 x i8] c"--\\\\--\00"
@6 = private constant [20 x i8] c"-\00-\07-\08-\1B-\0C-\0A-\0D-\09-\0B-\00"
@7 = private constant [10 x i8] c"this test\00"
@8 = private constant [6 x i8] c"hello\00"

define i32 @main() {
  %str1 = alloca [0 x i8]*
  store [0 x i8]* bitcast ([13 x i8]* @1 to [0 x i8]*), [0 x i8]** %str1
  %str2 = alloca [0 x i8]*
  store [0 x i8]* bitcast ([10 x i8]* @2 to [0 x i8]*), [0 x i8]** %str2
  %str3 = alloca [0 x i8]*
  store [0 x i8]* bitcast ([9 x i8]* @3 to [0 x i8]*), [0 x i8]** %str3
  ret i32 0
}

define void @func() {
  %a = alloca [0 x i8]*
  store [0 x i8]* bitcast ([11 x i8]* @4 to [0 x i8]*), [0 x i8]** %a
  %b = alloca [0 x i8]*
  store [0 x i8]* bitcast ([7 x i8]* @5 to [0 x i8]*), [0 x i8]** %b
  %c = alloca [0 x i8]*
  store [0 x i8]* bitcast ([20 x i8]* @6 to [0 x i8]*), [0 x i8]** %c
  ret void
}

define [0 x i8]* @getStr([0 x i8]* %s) {
  %1 = alloca [0 x i8]*
  store [0 x i8]* %s, [0 x i8]** %1
  ret [0 x i8]* bitcast ([10 x i8]* @7 to [0 x i8]*)
}

define void @callStr() {
  %1 = call [0 x i8]* @getStr([0 x i8]* bitcast ([6 x i8]* @8 to [0 x i8]*))
  %s = alloca [0 x i8]*
  store [0 x i8]* %1, [0 x i8]** %s
  ret void
}

========

callStr T
func T
gA D
getStr T
main T
