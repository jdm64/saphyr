
void callLambda()
{
	auto lambda = |int a, int b| => int {
		return a + b;
	};

	auto num = lambda(4, 5);
}

void otherCall()
{
	@()float lambda = | | => float {
		return 3.5;
	};

	auto num = lambda();
}

void takeLambda(@(int)int func)
{
	func(4);
}

void passLambda()
{
	takeLambda(|int a| => int {
		return 3;
	});
}

========

define void @callLambda() {
  %lambda = alloca i32 (i32, i32)*
  store i32 (i32, i32)* @callLambda_416, i32 (i32, i32)** %lambda
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %lambda
  %2 = call i32 %1(i32 4, i32 5)
  %num = alloca i32
  store i32 %2, i32* %num
  ret void
}

define i32 @callLambda_416(i32 %a, i32 %b) {
  %1 = alloca i32
  store i32 %a, i32* %1
  %2 = alloca i32
  store i32 %b, i32* %2
  %3 = load i32, i32* %1
  %4 = load i32, i32* %2
  %5 = add i32 %3, %4
  ret i32 %5
}

define void @otherCall() {
  %lambda = alloca float ()*
  store float ()* @otherCall_1320, float ()** %lambda
  %1 = load float ()*, float ()** %lambda
  %2 = call float %1()
  %num = alloca float
  store float %2, float* %num
  ret void
}

define float @otherCall_1320() {
  ret float 3.500000e+00
}

define void @takeLambda(i32 (i32)* %func) {
  %1 = alloca i32 (i32)*
  store i32 (i32)* %func, i32 (i32)** %1
  %2 = load i32 (i32)*, i32 (i32)** %1
  %3 = call i32 %2(i32 4)
  ret void
}

define void @passLambda() {
  call void @takeLambda(i32 (i32)* @passLambda_2713)
  ret void
}

define i32 @passLambda_2713(i32 %a) {
  %1 = alloca i32
  store i32 %a, i32* %1
  ret i32 3
}

========

callLambda T
callLambda_416 T
otherCall T
otherCall_1320 T
passLambda T
passLambda_2713 T
takeLambda T
