
vec<3,int> retVecWithNum()
{
	int a = 5, b = 8;
	return a + b;
}

void numToVec()
{
	vec<3,int> z;
	vec<3,bool> b;

	z += 3;
	b = 4;
}

void vecCasting()
{
	vec<3,int8> a = 3;
	vec<3,int16> b;
	vec<3,bool> c;

	c = 23 + a + b;
}

int vecEquality()
{
	vec<3,uint> a, b;

	auto c = a == b;

	return c[2];
}

void vecOps()
{
	vec<3,int> a;

	auto c = -a;
	c = ~a;
	c++;
	c--;
}

alias IntPtr = @int;

void vecPointer()
{
	vec<3, IntPtr> a;

	a[0] = new int;
	a[0]@ = 4;
}

========

define <3 x i32> @retVecWithNum() {
  %a = alloca i32
  store i32 5, i32* %a
  %b = alloca i32
  store i32 8, i32* %b
  %1 = load i32, i32* %a
  %2 = load i32, i32* %b
  %3 = add i32 %1, %2
  %4 = insertelement <1 x i32> undef, i32 %3, i32 0
  %5 = shufflevector <1 x i32> %4, <1 x i32> undef, <3 x i32> zeroinitializer
  ret <3 x i32> %5
}

define void @numToVec() {
  %z = alloca <3 x i32>
  %b = alloca <3 x i1>
  %1 = load <3 x i32>, <3 x i32>* %z
  %2 = add <3 x i32> %1, <i32 3, i32 3, i32 3>
  store <3 x i32> %2, <3 x i32>* %z
  store <3 x i1> <i1 true, i1 true, i1 true>, <3 x i1>* %b
  ret void
}

define void @vecCasting() {
  %a = alloca <3 x i8>
  store <3 x i8> <i8 3, i8 3, i8 3>, <3 x i8>* %a
  %b = alloca <3 x i16>
  %c = alloca <3 x i1>
  %1 = load <3 x i8>, <3 x i8>* %a
  %2 = add <3 x i8> <i8 23, i8 23, i8 23>, %1
  %3 = load <3 x i16>, <3 x i16>* %b
  %4 = sext <3 x i8> %2 to <3 x i16>
  %5 = add <3 x i16> %4, %3
  %6 = icmp ne <3 x i16> %5, zeroinitializer
  store <3 x i1> %6, <3 x i1>* %c
  ret void
}

define i32 @vecEquality() {
  %a = alloca <3 x i32>
  %b = alloca <3 x i32>
  %1 = load <3 x i32>, <3 x i32>* %a
  %2 = load <3 x i32>, <3 x i32>* %b
  %3 = icmp eq <3 x i32> %1, %2
  %c = alloca <3 x i1>
  store <3 x i1> %3, <3 x i1>* %c
  %4 = getelementptr <3 x i1>, <3 x i1>* %c, i32 0, i64 2
  %5 = load i1, i1* %4
  %6 = zext i1 %5 to i32
  ret i32 %6
}

define void @vecOps() {
  %a = alloca <3 x i32>
  %1 = load <3 x i32>, <3 x i32>* %a
  %2 = sub <3 x i32> zeroinitializer, %1
  %c = alloca <3 x i32>
  store <3 x i32> %2, <3 x i32>* %c
  %3 = load <3 x i32>, <3 x i32>* %a
  %4 = xor <3 x i32> <i32 -1, i32 -1, i32 -1>, %3
  store <3 x i32> %4, <3 x i32>* %c
  %5 = load <3 x i32>, <3 x i32>* %c
  %6 = add <3 x i32> %5, <i32 1, i32 1, i32 1>
  store <3 x i32> %6, <3 x i32>* %c
  %7 = load <3 x i32>, <3 x i32>* %c
  %8 = add <3 x i32> %7, <i32 -1, i32 -1, i32 -1>
  store <3 x i32> %8, <3 x i32>* %c
  ret void
}

define void @vecPointer() {
  %a = alloca <3 x i32*>
  %1 = getelementptr <3 x i32*>, <3 x i32*>* %a, i32 0, i64 0
  %2 = call i8* @malloc(i64 4)
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %1
  %4 = getelementptr <3 x i32*>, <3 x i32*>* %a, i32 0, i64 0
  %5 = load i32*, i32** %4
  store i32 4, i32* %5
  ret void
}

declare i8* @malloc(i64)

========

malloc U
numToVec T
retVecWithNum T
vecCasting T
vecEquality T
vecOps T
vecPointer T
