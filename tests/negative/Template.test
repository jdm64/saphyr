
class Foo<T, U>
{
}

class Foo<X>
{
}

class Foo
{
}

class Bar
{
}

class Bar<T>
{
}

void foo()
{
	Foo a;
	Foo<int> b;
	Bar<float> c;
}

class List<T>
{
	void run()
	{
		T a;
	}
}

class HasConstr
{
	struct this
	{
		int a;
	}

	this(int b)
	{
		a = b + 5;
	}
}

void errMsg()
{
	List<HasConstr> a;
	List<int> b;
}

========

negative/Template.syp:6:7: type with name Foo already declared
negative/Template.syp:10:7: type with name Foo already declared
negative/Template.syp:18:7: type with name Bar already declared
negative/Template.syp:24:2: Foo type requires template arguments
negative/Template.syp:25:2: number of template args doesn't match for Foo
negative/Template.syp:26:2: Bar type is not a template
negative/Template.syp:33:5: argument count for HasConstr_this function invalid, 1 arguments given, but 2 required.
negative/Template.syp:52:2: errors when creating type: List<HasConstr>
found 8 errors
